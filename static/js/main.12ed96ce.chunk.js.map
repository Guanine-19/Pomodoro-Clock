{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ClockButton","props","class","id","this","type","title","onClick","method","length","onChange","set","React","Component","App","useState","running","setrunning","breakLength","setbreakLength","sessionLength","setsessionLength","timer","settimer","seconds","setseconds","label","setlabel","switchrunning","usetimer","setusetimer","settimerdisplay","useEffect","setTimeout","Math","floor","slice","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iPAKMA,G,wDACJ,WAAYC,GAAO,uCACXA,G,qDAEC,IAAD,OACN,OACE,yBAAKC,MAAM,4BACT,wBAAIC,GAAIC,KAAKH,MAAMI,KAAK,UAAWD,KAAKH,MAAMK,OAC9C,yBAAKJ,MAAM,oDACT,yBAAKA,MAAM,eAAeC,GAAIC,KAAKH,MAAMI,KAAK,aAAcE,QAAS,WAAK,EAAKN,MAAMO,OAAO,EAAKP,MAAMQ,OAAO,KAC5G,uBAAGP,MAAM,mCAEX,yBAAKA,MAAM,sBACT,wBAAIC,GAAIC,KAAKH,MAAMI,KAAK,UAAWK,SAAUN,KAAKH,MAAMU,KAAMP,KAAKH,MAAMQ,SAE3E,yBAAKP,MAAM,eAAeC,GAAIC,KAAKH,MAAMI,KAAK,aAAcE,QAAS,WAAK,EAAKN,MAAMO,OAAO,EAAKP,MAAMQ,OAAO,KAC5G,uBAAGP,MAAM,2C,GAhBKU,IAAMC,YA6EjBC,MArDf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEyBF,mBAAS,GAFlC,mBAENG,EAFM,KAEOC,EAFP,OAG6BJ,mBAAS,GAHtC,mBAGNK,EAHM,KAGSC,EAHT,OAIaN,mBAASK,GAJtB,mBAINE,EAJM,KAICC,EAJD,OAKiBR,mBAAS,GAL1B,mBAKNS,EALM,KAKGC,EALH,OAMaV,mBAAS,WANtB,mBAMNW,EANM,KAMCC,EAND,KAOPC,EAAgB,WAAOX,GAAYD,IAP5B,EAQmBD,mBAAS,GAR5B,mBAQNc,EARM,KAQIC,EARJ,KASPC,EAAkB,WACtBF,IAAYX,GAAeK,EAASL,GACpCW,IAAYT,GAAiBG,EAASH,IAgBxC,OANAY,qBAAU,WACRhB,GAAWQ,EAAU,GAAKS,YAAW,kBAAKR,EAAWD,EAAU,KAAI,KACnER,GAAWQ,GAAW,GAAKS,YAAW,WAAMV,EAASD,EAAQ,GAAIG,EAAW,KAAK,KACvE,IAAVH,GAA2B,IAAZE,IAVJ,IAARF,GAA0B,IAAbO,GACdN,EAASL,GAAeY,EAAY,GAAKH,EAAS,UACjC,IAARL,GAA0B,IAAbO,IACtBN,EAASH,GAAiBU,EAAY,GAAKH,EAAS,eAQrD,CAACX,EAASQ,EAASK,IAGpB,yBAAK3B,MAAM,0BAA0BC,GAAG,UACtC,yBAAKD,MAAM,UAAX,kBAGA,kBAAC,EAAD,CAAaI,MAAM,eAAeG,OAAQS,EAAaV,OAAQW,EAAgBR,IAAKoB,EAAiB1B,KAAK,UAC1G,kBAAC,EAAD,CAAaC,MAAM,iBAAiBG,OAAQyB,KAAKC,MAAMf,GAAgBZ,OAAQa,EAAkBV,IAAKoB,EAAiB1B,KAAK,YAC5H,yBAAKH,MAAM,iCACT,wBAAIC,GAAG,eAAeuB,GACtB,6BAAM,IAAMJ,GAAOc,OAAO,GAA1B,KAAgC,IAAMZ,GAASY,OAAO,KAExD,yBAAKlC,MAAM,4CACT,yBAAKA,MAAM,kBAAkBK,QAASqB,GACpC,uBAAG1B,MAAM,kBAEX,yBAAKA,MAAM,kBAAkBK,QAASqB,GACpC,sCAEF,yBAAK1B,MAAM,mBACT,uBAAGA,MAAM,sBC/DbmC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,MCzFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDWnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,kBAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,kBAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCjC/BE,I","file":"static/js/main.12ed96ce.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nclass ClockButton extends React.Component{\n  constructor(props){\n    super(props)\n  }\n  render(){\n    return(\n      <div class=\"col-6 align-items-center\">\n        <h3 id={this.props.type+\"-label\"}>{this.props.title}</h3>\n        <div class=\"d-flex align-items-center justify-content-center\">\n          <div class=\"button col-2\" id={this.props.type+\"-increment\"} onClick={()=>{this.props.method(this.props.length+1)}}>\n            <i class=\"button fas fa-arrow-circle-up\"></i>\n          </div>\n          <div class=\"length label col-4\">\n            <h4 id={this.props.type+\"-length\"} onChange={this.props.set}>{this.props.length}</h4>\n          </div>\n          <div class=\"button col-2\" id={this.props.type+\"-decrement\"} onClick={()=>{this.props.method(this.props.length-1)}}>\n            <i class=\"button fas fa-arrow-circle-down\"></i>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  const [running, setrunning] = useState(false);\n  const [breakLength, setbreakLength] = useState(2);\n  const [sessionLength, setsessionLength] = useState(5);\n  const [timer, settimer] = useState(sessionLength);\n  const [seconds, setseconds] = useState(0);\n  const [label, setlabel] = useState(\"Session\");\n  const switchrunning = () => {setrunning(!running)};\n  const [usetimer, setusetimer] = useState(1);\n  const settimerdisplay = () => {\n    usetimer=== breakLength && settimer(breakLength);\n    usetimer=== sessionLength && settimer(sessionLength);\n  }\n  const switchtimer = () => {\n    if(timer===0 && usetimer === 1){\n      settimer(breakLength) ; setusetimer(2) ; setlabel(\"Break\");\n    } else if (timer===0 && usetimer === 2){\n      settimer(sessionLength) ; setusetimer(1) ; setlabel(\"Session\");\n    }\n  }\n\n  useEffect(() => {\n    running && seconds > 0 && setTimeout(()=> setseconds(seconds - 1) ,1000);\n    running && seconds <= 0 && setTimeout(()=> {settimer(timer - 1); setseconds(2)} ,1000);\n    timer === 0 && seconds === 0 && switchtimer();\n  }, [running, seconds, usetimer]);\n  \n  return(\n    <div class=\"row container-fluid p-4\" id=\"PClock\">\n      <div class=\"col-12\">\n        POMODORO CLOCK\n      </div>\n      <ClockButton title=\"Break Length\" length={breakLength} method={setbreakLength} set={settimerdisplay} type=\"break\" />\n      <ClockButton title=\"Session Length\" length={Math.floor(sessionLength)} method={setsessionLength} set={settimerdisplay} type=\"session\" />    \n      <div class=\"col-12 justify-content-center\">\n        <h3 id=\"timer-label\">{label}</h3>\n        <h1>{(\"0\" + timer).slice(-2)}:{(\"0\" + seconds).slice(-2)}</h1>\n      </div>\n      <div class=\"col-12 d-flex p-0 justify-content-center\">\n        <div class=\"clickable col-2\" onClick={switchrunning}>\n          <i class=\"fas fa-pause\"></i>\n        </div>\n        <div class=\"clickable col-3\" onClick={switchrunning}>\n          <h4>START</h4>\n        </div>\n        <div class=\"clickable col-2\">\n          <i class=\"fa fa-refresh\"></i>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}