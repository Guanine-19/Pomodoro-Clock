{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ClockButton","props","class","id","this","type","title","onClick","running","length","method","onChange","set","React","Component","App","useState","setrunning","pause","setpause","breakLength","setbreakLength","sessionLength","setsessionLength","timer","settimer","seconds","setseconds","label","setlabel","usetimer","setusetimer","settimerdisplay","switchtimer","clearTimeout","sound","document","getElementById","currentTime","play","playBeep","useEffect","setTimeout","src","slice","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.53119e20.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nclass ClockButton extends React.Component{\n  constructor(props){\n    super(props)\n  }\n\n  render(){\n    return(\n      <div class=\"col-6 align-items-center\">\n        <h3 id={this.props.type+\"-label\"}>{this.props.title}</h3>\n        <div class=\"d-flex align-items-center justify-content-center\">\n          <div class=\"button col-2\" id={this.props.type+\"-increment\"} onClick={()=>{!this.props.running && this.props.length<60 && this.props.method(this.props.length+1)}}>\n            <i class=\"button fas fa-arrow-circle-up\"></i>\n          </div>\n          <div class=\"length label col-4\">\n            <h4 id={this.props.type+\"-length\"} onChange={this.props.set()}>{this.props.length}</h4>\n          </div>\n          <div class=\"button col-2\" id={this.props.type+\"-decrement\"} onClick={()=>{!this.props.running && this.props.length>1 && this.props.method(this.props.length-1)}}>\n            <i class=\"button fas fa-arrow-circle-down\"></i>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction App() {\n  //STATES\n  const [running, setrunning] = useState(false);\n  const [pause, setpause] = useState(true);\n  const [breakLength, setbreakLength] = useState(5);\n  const [sessionLength, setsessionLength] = useState(25);\n  const [timer, settimer] = useState(sessionLength);\n  const [seconds, setseconds] = useState(0);\n  const [label, setlabel] = useState(\"Session\");\n  const [usetimer, setusetimer] = useState(1);\n\n  //METHODS\n  const settimerdisplay = () => {\n    !running && usetimer=== 2 && settimer(breakLength);\n    !running && usetimer=== 1 && settimer(sessionLength);\n  }\n\n  const playBeep = () =>{\n    const sound = document.getElementById(\"beep\");\n    sound.currentTime = 0;\n    sound.play();\n  }\n\n  const switchtimer = () => {\n    clearTimeout();\n    if(timer===0 && usetimer === 1){\n      settimer(breakLength-1) ; setusetimer(2) ; setlabel(\"Break\");\n    } else if (timer===0 && usetimer === 2){\n      settimer(sessionLength-1) ; setusetimer(1) ; setlabel(\"Session\");\n    }\n    playBeep();\n  }\n\n  const reset = () => {\n    setrunning(false);\n    setpause(true);\n    setbreakLength(5);\n    setsessionLength(25);\n    setusetimer(1);\n    settimer(sessionLength);\n    setlabel(\"Session\");\n    setseconds(0);\n  }\n\n  useEffect(() => {\n    !running && setseconds(0);\n    running && timer>=0 && !pause && seconds <= 0 && setTimeout(()=> {settimer(timer - 1); setseconds(59)} ,1000);\n    running && timer>=0 && !pause && seconds > 0 && setTimeout(()=> setseconds(seconds - 1) ,1000);\n    timer <= 0 && seconds === 0 && setTimeout(()=> {switchtimer()}, 1000);\n  }, [running, pause, seconds, usetimer]);\n  \n  return(\n    <div class=\"row container-fluid p-4\" id=\"PClock\">\n      <div class=\"col-12\">\n        POMODORO CLOCK\n        <p>Designed and Coded by: Guanine-19</p>\n      </div>\n      <audio id=\"beep\" type=\"audio/mp3\" src='https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'></audio>\n      <ClockButton title=\"Break Length\" length={breakLength} method={setbreakLength} running={running} set={settimerdisplay} type=\"break\" />\n      <ClockButton title=\"Session Length\" length={sessionLength} method={setsessionLength} running={running} set={settimerdisplay} type=\"session\" />    \n      <div class=\"col-12 justify-content-center\">\n        {label===\"Session\" && <h3 id=\"timer-label\" class=\"animated flipInX\">{label}</h3>}\n        {label===\"Break\" && <h3 id=\"timer-label\" class=\"animated flipInX\">{label}</h3>}\n        <h1 id=\"time-left\">{(\"0\" + timer).slice(-2)}:{(\"0\" + seconds).slice(-2)}</h1>\n      </div>\n      <div class=\"col-12 d-flex p-0 justify-content-center\">\n        <div id=\"start_stop\" class=\"clickable col-2 align-items-center\" onClick={()=>{setpause(!pause);clearTimeout()}}>\n          {!pause && <i class=\"animated flipInX fas fa-pause\"></i>}\n          {pause && <i class=\"animated flipInX fas fa-play\"></i>}\n        </div>\n        <div class=\"clickable col-3 align-items-center\" onClick={()=>{setpause(!pause);setrunning(!running);clearTimeout()}}>\n          {!running && <h4 class=\"animated flipInX\">START</h4>}\n          {running && <h4 class=\"animated flipInX\">STOP</h4>}\n        </div>\n        <div id=\"reset\" class=\"clickable col-2 align-items-center\" onClick={reset}>\n          <i class=\"fa fa-refresh\"></i>\n        </div>\n      </div>\n      \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}